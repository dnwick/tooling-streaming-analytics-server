{
  "functions": {
    "sum": [
      {
        "description": "Returns the sum for all the events."
      }
    ],
    "avg": [
      {
        "description": "Returns the average for all the events."
      }
    ],
    "max": [
      {
        "description": "Returns the maximum value for all the events."
      }
    ],
    "min": [
      {
        "description": "Returns the minimum value for all the events."
      }
    ],
    "count": [
      {
        "description": "Returns the count of all the events."
      }
    ],
    "stddev": [
      {
        "description": "Returns the calculated standard deviation for all the events."
      }
    ],
    "distinctcount": [
      {
        "description": "Returns the count of distinct occurrences for a given arg."
      }
    ],
    "maxForever": [
      {
        "description": "This is the attribute aggregator to store the maximum value for a given attribute throughout the lifetime of the query regardless of any windows in-front."
      }
    ],
    "minForever": [
      {
        "description": "This is the attribute aggregator to store the minimum value for a given attribute throughout the lifetime of the query regardless of any windows in-front."
      }
    ],
    "coalesce": [
      {
        "description": "Returns the value of the first input parameter that is not null."
      }
    ],
    "convert": [
      {
        "description": "Converts the first input parameter according to the convertedTo parameter."
      }
    ],
    "instanceOfBoolean": [
      {
        "description": "Checks whether the parameter is an instance of Boolean or not."
      }
    ],
    "instanceOfDouble": [
      {
        "description": "Checks whether the parameter is an instance of Double or not."
      }
    ],
    "instanceOfFloat": [
      {
        "description": "Checks whether the parameter is an instance of Float or not."
      }
    ],
    "instanceOfInteger": [
      {
        "description": "Checks whether the parameter is an instance of Integer or not."
      }
    ],
    "instanceOfLong": [
      {
        "description": "Checks whether the parameter is an instance of Long or not."
      }
    ],
    "instanceOfString": [
      {
        "description": "Checks whether the parameter is an instance of String or not."
      }
    ],
    "UUID": [
      {
        "description": "Generates a UUID (Universally Unique Identifier)."
      }
    ],
    "maximum": [
      {
        "description": "Returns the maximum value of the input parameters."
      }
    ],
    "minimum": [
      {
        "description": "Returns the minimum value of the input parameters."
      }
    ],
    "cast": [
      {
        "description": "Converts the first parameter according to the castTo parameter. Incompatible arguments cause Class Cast exceptions if further processed. This function is used with map extension that returns attributes of the object type. You can use this function to cast the object to an accurate and concrete type."
      }
    ],
    "ifThenElse": [
      {
        "description": "Returns the the value of the arg1 parameter if the condition parameter is set to true, or returns the value of the arg2 parameter if the condition parameter is set to false."
      }
    ]
  },
  "streamProcessors": {
  },
  "windowProcessors": {
    "time": [
      {
        "description": "A sliding time window that holds events that arrived during the last windowTime period at a given time, and gets updated for each event arrival and expiry."
      }
    ],
    "timeBatch": [
      {
        "description": "A batch (tumbling) time window that holds events that arrive during windowTime periods, and gets updated for each windowTime."
      }
    ],
    "length": [
      {
        "description": "A sliding length window that holds the last windowLength events at a given time, and gets updated for each arrival and expiry."
      }
    ],
    "lengthBatch": [
      {
        "description": "A batch (tumbling) length window that holds a number of events specified as the windowLength. The window is updated each time a batch of events that equals the number specified as the windowLength arrives."
      }
    ],
    "externalTime": [
      {
        "description": "A sliding time window based on external time. It holds events that arrived during the last windowTime period from the external timestamp, and gets updated on every monotonically increasing timestamp."
      }
    ],
    "cron": [
      {
        "description": "This window returns events processed periodically as the output in time-repeating patterns, triggered based on time passing."
      }
    ],
    "firstUnique": [
      {
        "description": "First unique window processor keeps only the first events that are unique according to the given unique attribute."
      }
    ],
    "unique": [
      {
        "description": "This window keeps only the latest events that are unique according to the given unique attribute."
      }
    ],
    "sort": [
      {
        "description": "This window holds a batch of events that equal the number specified as the windowLength and sorts them in the given order."
      }
    ],
    "frequent": [
      {
        "description": "This window returns the latest events with the most frequently occurred value for a given attribute(s). Frequency calculation for this window processor is based on Misra-Gries counting algorithm."
      }
    ],
    "lossyFrequent": [
      {
        "description": "This window identifies and returns all the events of which the current frequency exceeds the value specified for the supportThreshold parameter."
      }
    ],
    "externalTimeBatch": [
      {
        "description": "A batch (tumbling) time window based on external time, that holds events arrived during windowTime periods, and gets updated for every windowTime."
      }
    ],
    "timeLength": [
      {
        "description": "A sliding time window that, at a given time holds the last windowLength events that arrived during last windowTime period, and gets updated for every event arrival and expiry."
      }
    ],
    "uniqueExternalTimeBatch": [
      {
        "description": "A batch (tumbling) time window based on external time that holds latest unique events that arrive during the windowTime periods, and gets updated for each windowTime."
      }
    ]
  }
}